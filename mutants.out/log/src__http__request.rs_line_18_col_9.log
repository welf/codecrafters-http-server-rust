
*** src/http/request.rs:18:9: replace <impl TryFrom for Request>::try_from -> Result<Self, Self::Error> with Ok(Default::default())

*** mutation diff:
--- src/http/request.rs
+++ replace <impl TryFrom for Request>::try_from -> Result<Self, Self::Error> with Ok(Default::default())
@@ -10,79 +10,17 @@
     pub body: Vec<u8>,
 }
 
 impl TryFrom<&str> for Request {
     type Error = ParseRequestError;
 
     fn try_from(request_str: &str) -> Result<Self, Self::Error> {
         // Get the first line of the request
-        let (first_line, mut rest) = get_next_request_line(request_str)?;
-
-        // Split the first line into the method and the rest of the line
-        let (method, rest_of_line) = get_next_word(first_line).ok_or(ParseRequestError {
-            kind: ParseRequestErrorKind::InvalidRequest,
-        })?;
-
-        // Parse the method
-        let method = method.parse::<Method>()?;
-
-        // Split the rest of the first line into the URI and the protocol
-        let (uri, protocol) = get_next_word(rest_of_line).ok_or(ParseRequestError {
-            kind: ParseRequestErrorKind::InvalidRequest,
-        })?;
-
-        let uri = uri.to_string();
-
-        if !uri.starts_with('/') {
-            return Err(ParseRequestError {
-                kind: ParseRequestErrorKind::InvalidRequest,
-            });
-        }
-
-        // Ensure the protocol is HTTP/1.1
-        if protocol != "HTTP/1.1" {
-            // We can get an empty protocol if the method or URI are missing
-            if protocol.is_empty() {
-                return Err(ParseRequestError {
-                    kind: ParseRequestErrorKind::InvalidRequest,
-                });
-            }
-            return Err(ParseRequestError {
-                kind: ParseRequestErrorKind::InvalidProtocol,
-            });
-        }
-
-        let mut headers = Vec::new();
-
-        // Consume iterator lines until we reach an empty line
-        for line in rest.by_ref() {
-            // If the line is empty, we've reached the end of the headers
-            if line.is_empty() {
-                break;
-            }
-
-            // Parse the header
-            let (header_name, header_value) = parse_header(line).ok_or(ParseRequestError {
-                kind: ParseRequestErrorKind::InvalidRequest,
-            })?;
-
-            // Add the header to the headers vector
-            headers.push((header_name.to_string(), header_value.to_string()));
-        }
-
-        // The rest of the request is the body
-        let body: Vec<u8> = rest.flat_map(|line| line.as_bytes().to_owned()).collect();
-
-        Ok(Self {
-            method,
-            uri,
-            headers,
-            body,
-        })
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
         // todo!()
     }
 }
 
 fn get_next_request_line(request_str: &str) -> Result<(&str, Lines), ParseRequestError> {
     let mut lines = request_str.lines();
     let first_line = lines.next().ok_or(ParseRequestError {
         kind: ParseRequestErrorKind::InvalidRequest,


*** /Users/aw/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo test --no-run --manifest-path /var/folders/dk/rmy45p9s5bn3y62kyrkfh6440000gn/T/cargo-mutants-codecrafters-http-server-rust-eXV76S.tmp/Cargo.toml --all-features
   Compiling http-server-starter-rust v0.1.0 (/var/folders/dk/rmy45p9s5bn3y62kyrkfh6440000gn/T/cargo-mutants-codecrafters-http-server-rust-eXV76S.tmp)
error[E0277]: the trait bound `request::Request: std::default::Default` is not satisfied
  --> src/http/request.rs:18:12
   |
18 |         Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
   |            ^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `request::Request`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `http-server-starter-rust` (bin "http-server-starter-rust" test) due to 1 previous error

*** result: Failure(101)
