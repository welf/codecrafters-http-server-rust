
*** src/http/response_builder.rs:121:9: replace ResponseBuilder<S>::headers -> Self with Default::default()

*** mutation diff:
--- src/http/response_builder.rs
+++ replace ResponseBuilder<S>::headers -> Self with Default::default()
@@ -113,29 +113,17 @@
             }
         }
 
         self
     }
 
     fn headers(mut self, headers: Vec<(impl Into<String>, impl Into<String>)>) -> Self {
         // Filter out the Content-Length header and convert headers' keys and values to owned strings
-        let headers = headers
-            .into_iter()
-            .map(|(key, value)| -> (String, String) { (key.into(), value.into()) })
-            .filter(|(key, _)| key.clone().as_str() != "Content-Length")
-            .collect::<Vec<_>>();
-
-        if let Some(ref mut existing_headers) = self.headers {
-            existing_headers.extend(headers); // Extend existing headers
-        } else {
-            self.headers = Some(headers); // Set the headers
-        }
-
-        self
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 
     // This method is used to not to set the Content-Length header on empty bodies to pass codecrafters tests
     /// # Do not set the Content-Length header on the response.
     ///
     /// This method is used to not to set the Content-Length header.
     ///
     /// # Example


*** /Users/aw/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo test --no-run --manifest-path /var/folders/dk/rmy45p9s5bn3y62kyrkfh6440000gn/T/cargo-mutants-codecrafters-http-server-rust-eXV76S.tmp/Cargo.toml --all-features
   Compiling http-server-starter-rust v0.1.0 (/var/folders/dk/rmy45p9s5bn3y62kyrkfh6440000gn/T/cargo-mutants-codecrafters-http-server-rust-eXV76S.tmp)
error[E0277]: the trait bound `response_builder::ResponseBuilder<S>: std::default::Default` is not satisfied
   --> src/http/response_builder.rs:121:9
    |
121 |         Default::default() /* ~ changed by cargo-mutants ~ */
    |         ^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `response_builder::ResponseBuilder<S>`
    |
help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement
    |
62  | impl<S> ResponseBuilder<S> where response_builder::ResponseBuilder<S>: std::default::Default {
    |                            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

For more information about this error, try `rustc --explain E0277`.
error: could not compile `http-server-starter-rust` (bin "http-server-starter-rust" test) due to 1 previous error

*** result: Failure(101)
